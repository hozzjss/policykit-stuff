{"name":"Democracy: Constitution Actions Voted In","description":"Starter Constitution Policy: all constitution actions must be approved by voters in voting process","is_bundled":false,"filter":"\nif not action.initiator.groups.filter(name = \"Moderator\").exists():\n    return True\nelse:\n    return False\n                                                           ","initialize":"pass","check":"import datetime\nimport math\ndef hasVoterRole(user):\n\treturn user.has_role('Democracy: Voter')\n# voter_users = list(filter(hasVoterRole, users))\nvoter_users = users\nyes_votes = action.proposal.get_yes_votes(users=voter_users)\ndebug(f'yes votes are {len(yes_votes)}')\ntry:\n    result = metagov.perform_action(\"sourcecred.total-cred\", {})\n    total_cred = result[\"value\"]\n    staked_cred = 0\n\n    for vote in yes_votes:\n        user = vote.user\n        username = user.readable_name\n        if username != \"PolicyKit\":\n            params = {\"username\": username}\n            result = metagov.perform_action(\"sourcecred.user-cred\", params)\n            user_cred = result[\"value\"]\n            staked_cred += user_cred\n    debug(f\"total staked cred is {staked_cred}\")\n    staked_cred_percentage = staked_cred / total_cred\n    formatted_percentage = math.floor(staked_cred_percentage * 100)\n    debug(f\"percentage of staked reputation is {formatted_percentage}\")\nexcept Exception as err:\n    debug(err)\n\nif len(yes_votes) >= 1:\n    return PASSED\nelif action.proposal.get_time_elapsed() > datetime.timedelta(days=1):\n    return FAILED\n","notify":"import time\n\naction.community.notify_action(action, policy, users, template='Would you stake your reputation on this proposal?', channel=846398942119329862)\n\ntime.sleep(1)\n\naction.community.react_to_message(846398942119329862, action.community_post, '👍')\n\ntime.sleep(1)\n\naction.community.react_to_message(846398942119329862, action.community_post, '👎')\n","success":"action.execute()","fail":"pass"}